#!/bin/bash
filename=`basename $0`

# create the lock
if [ -f _syncLock ] 
then 
	linecount=`wc -l _syncLock | grep -E '[[:digit:]]+' -o`
	if [ $linecount -eq %(maxThreadNum)% ]
	then
		echo 'sync blocked ...'
		echo -e $filename"\tskipped\t"$(date +%F_%T) >>  %(syncLog)%
		exit -1
	fi
	for line in `cat _syncLock`
	do
		if [ $line == $filename ]
		then
			echo 'sync blocked ...'
			echo -e $filename"\tskipped\t"$(date +%F_%T) >> %(syncLog)%
			exit -1
		fi
	done
fi
echo $filename >> _syncLock

excuted=0
if [ -f _executeOnceLock ]
then
	for name in `cat _excuteOnceLock`
	do
		if [ $name == $filename ]
		then
			excuted=1	
		fi
	done
fi

if [ $excuted -eq 0 ]
then
	git clone --mirror %(url)% %(syncpath)%
	echo $filename >> _excuteOnceLock
fi


# sync
startSyncTime=$(date +%s)
set -o pipefail
echo '==== sync '$filename' start ===='
if [ ! -d %(syncpath)% ]
then
	mkdir -p %(syncpath)%
fi

currentPath=$PWD
cd %(syncpath)%
timeout --preserve-status %(timeout)%h %(synctool)% %(parameter)% | tee %(logPath)%/${filename}"_"$(date +%F_%T)".log"
result=$?
cd $currentPath
sleep 2
stopSyncTime=$(date +%s)

if [ $((startSyncTime-stopSyncTime)) -gt $((%(timeout)%*3600)) ]
then
	#sync timeout
	echo -e $filename"\ttimeout\t"$(date +%F_%T) >> %(syncLog)%
else
	if [ $result -eq 0 ]
	then
		#sync succeeded
		echo -e $filename"\tsucceed\t"$(date +%F_%T) >> %(syncLog)%
	else
		#sync failed
		echo -e $filename"\tfailed\t"$(date +%F_%T) >> %(syncLog)%
	fi
fi

echo '==== sync '$filename' stop ===='

# remove the lock
if [ ! -f __syncLock ]
then
	touch __syncLock
fi

for line in `cat _syncLock`
do
	if [ $line != $filename ]
	then
		echo $line >> __syncLock
	fi
done

mv __syncLock _syncLock
